<!-- 引用Layout -->
@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}
<div class="container">
    @* <div class="row p-1">
        <div class="col-1">User</div>
        <div class="col-5"><input type="text" id="userInput" /></div>
    </div> *@
    <div class="row p-1">
        <div class="col-1">Message</div>
        <div class="col-5"><input type="text" class="w-100" id="messageInput" /></div>
    </div>
    <div class="row p-1">
        <div class="col-6 text-end">
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
    <div class="row p-1">
        <div class="col-6">
            <hr />
        </div>
    </div>
    <div class="row p-1">
        <div class="col-6">
            <ul id="messagesList"></ul>
        </div>
    </div>
</div>
@section Scripts{
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl("/AdminChatHub").build();

        //Disable the send button until connection is established.
        document.getElementById("sendButton").disabled = true;

        connection.on("ReceiveMessage", function (user, message) {
            try {
                var li = document.createElement("li");
                document.getElementById("messagesList").appendChild(li);
                // We can assign user-supplied strings to an element's textContent because it
                // is not interpreted as markup. If you're assigning in any other way, you
                // should be aware of possible script injection concerns.
                li.textContent = `${user} 說 ${message}`;
            } catch (error) {
                console.error('Error receiving message:', error);
            }
        });
        connection.on("DisConnectMessage", function (message) {
            var li = document.createElement("li");
            document.getElementById("messagesList").appendChild(li);
            // We can assign user-supplied strings to an element's textContent because it
            // is not interpreted as markup. If you're assigning in any other way, you
            // should be aware of possible script injection concerns.
            li.textContent = `${message}`;
        });
        connection.on("ConnectMessage", function (message) {
            var li = document.createElement("li");
            document.getElementById("messagesList").appendChild(li);
            // We can assign user-supplied strings to an element's textContent because it
            // is not interpreted as markup. If you're assigning in any other way, you
            // should be aware of possible script injection concerns.
            li.textContent = `${message}`;
        });

        connection.start().then(function () {
            document.getElementById("sendButton").disabled = false;
        }).catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("sendButton").addEventListener("click", function (event) {
            var message = document.getElementById("messageInput").value;
            connection.invoke("SendMessage", "admin", message).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        });
    </script>
}